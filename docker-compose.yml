version: '3.8'

services:
  # PostgreSQL service (db)
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ormgpt
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: War@123PG
    ports:
      - "5432:5432"  # Expose PostgreSQL on port 5432
    volumes:
      - ./.docker/postgres:/var/lib/postgresql/data  # Persist data
    restart: unless-stopped

  # MySQL service (db2) - If you still need it, leave it in, but use only for MySQL-related logic.
  db2:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: War@123MS
      MYSQL_DATABASE: ormgpt
    restart: unless-stopped
    ports:
      - "3307:3306"  # Expose MySQL on port 3307
    volumes:
      - ./.docker/mysql:/var/lib/mysql  # Persist MySQL data

  # Application service (your Node.js app)
  app:
    build: .  # Build from the Dockerfile in the current directory
    environment:
      - NODE_ENV=production
      - DOCKER_ENV=true  # Added DOCKER_ENV variable as requested
      - POSTGRES_HOST=db  # Correctly set to PostgreSQL service container (db)
      - POSTGRES_PASSWORD=War@123PG  # Password for PostgreSQL
      - PG_HOST=localhost  # Set PG_HOST to db service name (important for the app to connect)
      - PG_USER=postgres  # PostgreSQL user
      - PG_PASSWORD=War@123PG  # PostgreSQL password
      - PG_DB=ormgpt  # PostgreSQL database name
      - MYSQL_HOST=db2  # Only if MySQL logic is needed elsewhere
      - HUGGING_FACE_API_KEY=${HUGGING_FACE_API_KEY}
    env_file:
      - .env  # Load environment variables from the .env file  
    ports:
      - "3000:3000"  # Exposing port 3000 for the app
    depends_on:
      - db  # Ensure the app waits for PostgreSQL to be up before starting
    volumes:
      - .:/usr/src/app  # Mount current directory to app container
      - ./example:/usr/src/app/example  # Mount the example folder explicitly
      - ./example/schema.sql:/usr/src/app/example/schema.sql
    restart: unless-stopped
    command: ["npm", "start"]
    expose:
      - "3000"  # Expose port 3000 for internal communication
