import express, { Request, Response } from 'express';
import dotenv from 'dotenv';
import { Pool, QueryResult } from 'pg'; // Import QueryResult type for PostgreSQL query
import { PostgresAdapter } from './src/PostgresAdapter'; // Import PostgreSQL adapter (updated path)
import { ormGPT } from './src/ormGPT'; // Import ormGPT from src (updated path)

// Load environment variables
dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

// Setup PostgreSQL connection using Pool (no change needed here)
const pgPool = new Pool({
  host: process.env.POSTGRES_HOST, // Ensure the correct host for PostgreSQL
  port: 5432,
  user: 'postgres',
  password: 'War@123PG', // PostgreSQL password
  database: 'ormgpt',
});

// Initialize PostgreSQL adapter
const pgAdapter = new PostgresAdapter({
  client: pgPool, // Use Pool for PostgreSQL
});

// Middleware
app.use(express.json()); // Use express.json() to parse incoming JSON bodies

// Sample route to interact with PostgreSQL
app.get('/', async (req, res) => {
  try {
    // Example of PostgreSQL query
    const pgResult = await pgPool.query('SELECT NOW()');
    console.log('PostgreSQL result:', pgResult.rows);

    res.send('PostgreSQL connection is working');
  } catch (error) {
    console.error('Error:', error);
    res.status(500).send('Server error');
  }
});

// Initialize ormGPT with a dbEngineAdapter (PostgreSQL or MySQL)
async function setupOrmGPT() {
  const ormgpt = new ormGPT({
    apiKey: process.env.HUGGING_FACE_API_KEY || "",
    schemaFilePath: 'C:/Users/warni/Documents/ormAI/example/schema.sql', // Ensure this is the correct path for the schema file
    dialect: 'postgres', // Set dialect to 'postgres' for PostgreSQL
    dbEngineAdapter: pgAdapter, // Use PostgreSQL adapter (pgAdapter)
  });

  // Ensure you are ready to process queries
  return ormgpt;
}

// POST route to process the query from the user
app.post('/query', async (req: any, res: any) => {
  const { query } = req.body; // Expect a query in the body like: { "query": "get all users" }

  if (!query) {
    return res.status(400).json({ error: "Query is required" });
  }

  try {
    // Initialize ORM GPT
    const ormgpt = await setupOrmGPT();

    // Get the SQL query from ORM GPT
    const sqlQuery = await ormgpt.query(query);

    // Check if sqlQuery is a string (it should be the SQL query)
    if (typeof sqlQuery !== 'string') {
      return res.status(400).json({ error: 'Invalid query generated by ORM GPT' });
    }

    console.log("Generated SQL:", sqlQuery);

    // Execute the SQL query on the database (make sure to pass a string query to pgPool.query)
    const pgResult: QueryResult = await pgPool.query(sqlQuery);

    // Return the results as JSON (pgResult.rows contains the query result)
    res.json(pgResult.rows); // Now TypeScript knows that pgResult.rows is valid
  } catch (error) {
    console.error("Error executing query:", error);
    res.status(500).json({ error: "An error occurred while processing your request" });
  }
});

// Start server
app.listen(port, async () => {
  console.log(`Server running on port ${port}`);
  await setupOrmGPT(); // Initialize ormGPT with PostgreSQL adapter
});

export default app;
