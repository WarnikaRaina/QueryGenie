import express, { Request, Response, NextFunction } from 'express';
import dotenv from 'dotenv';
import { Pool, QueryResult } from 'pg'; // PostgreSQL client
import axios from 'axios'; // For making API calls to Hugging Face
import path from 'path';

// Load environment variables
dotenv.config();

// Check if the code is running inside Docker
const isDocker = process.env.DOCKER_ENV === "true";  // Set this environment variable in Docker

// Set the schema file path based on the environment (Docker or local)
const schemaFilePath = isDocker
  ? "/usr/src/app/example/schema.sql"  // Path inside the Docker container
  : path.resolve("./example/schema.sql");  // Path on the local machine

// Create an Express app
const app = express();
const port = process.env.PORT || 3000;

// Set PostgreSQL host depending on the environment
const pgHost = process.env.POSTGRES_HOST || process.env.PG_HOST || 'localhost';  // Docker or local

// Setup PostgreSQL connection using Pool
const pgPool = new Pool({
  host: pgHost,  // Dynamically set based on environment (Docker or local)
  port: 5432,
  user: process.env.PG_USER || 'postgres',
  password: process.env.PG_PASSWORD || 'War@123PG', // PostgreSQL password (use env variable)
  database: process.env.PG_DB || 'ormgpt', // Database name
});

// Middleware to parse incoming JSON
app.use(express.json()); // Use express.json() to parse incoming JSON bodies

// Health check endpoint for the server
app.get('/', async (req: Request, res: Response) => {
  try {
    // Query PostgreSQL to check if the connection works
    const pgResult = await pgPool.query('SELECT NOW()');
    console.log('PostgreSQL connection check result:', pgResult.rows);
    res.send('Server is up and running. PostgreSQL is connected.');
  } catch (error) {
    console.error('Error checking PostgreSQL connection:', error);
    res.status(500).send('Error with PostgreSQL connection');
  }
});

// POST route to process the query from the user (SQL query generation)
app.post('/query', async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  const { query } = req.body; // Expect a query in the body like: { "query": "Give me all users who ordered a laptop." }

  if (!query) {
    res.status(400).json({ error: 'Query is required' });
    return;
  }

  try {
    // Call Hugging Face API to generate the SQL query from the plain English input
    const huggingFaceResponse = await axios.post(
      'https://api-inference.huggingface.co/models/facebook/llama-2-7b', // Your Hugging Face model URL
      { inputs: query },
      {
        headers: {
          Authorization: `Bearer ${process.env.HUGGING_FACE_API_KEY}`, // Pass Hugging Face API key here
        }
      }
    );

    // The Hugging Face response will have a 'generated_text' property that contains the SQL query
    const sqlQuery = huggingFaceResponse.data.generated_text;

    if (typeof sqlQuery !== 'string') {
      res.status(400).json({ error: 'Invalid SQL query generated by Hugging Face' });
      return;
    }

    console.log('Generated SQL:', sqlQuery);

    // Execute the SQL query on PostgreSQL
    const pgResult: QueryResult = await pgPool.query(sqlQuery);

    // Return the results from PostgreSQL
    res.json(pgResult.rows); // Respond with rows from the database
  } catch (error) {
    console.error('Error executing query:', error);
    // Return an error response if the query execution or Hugging Face API fails
    res.status(500).json({ error: 'Error processing your query' });
  }
});

// Start the server
app.listen(port, async () => {
  console.log(`Server running on port ${port}`);
});

export default app;
