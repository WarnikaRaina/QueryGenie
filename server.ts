import express, { Request, Response, NextFunction } from 'express';
import dotenv from 'dotenv';
import { Pool, QueryResult } from 'pg'; // PostgreSQL client
import { PostgresAdapter } from './src/PostgresAdapter'; // PostgreSQL adapter
import { ormGPT } from './src/ormGPT'; // ORM GPT logic

// Load environment variables
dotenv.config();

// Create an Express app
const app = express();
const port = process.env.PORT || 3000;

// Setup PostgreSQL connection using Pool
const pgPool = new Pool({
  host: process.env.POSTGRES_HOST, // PostgreSQL host (db container)
  port: 5432,
  user: 'postgres',
  password: process.env.POSTGRES_PASSWORD || 'War@123PG', // PostgreSQL password (use env variable)
  database: 'ormgpt', // Database name
});

// Initialize PostgreSQL adapter
const pgAdapter = new PostgresAdapter({
  client: pgPool, // Use Pool for PostgreSQL
});

// Initialize ORM GPT once and reuse the instance
let ormgptInstance: ormGPT;

async function setupOrmGPT() {
  if (!ormgptInstance) {
    ormgptInstance = new ormGPT({
      apiKey: process.env.HUGGING_FACE_API_KEY || '', // Use your Hugging Face API key
      schemaFilePath: './example/schema.sql', // Path to schema file (if needed)
      dialect: 'postgres', // Set dialect to 'postgres' for PostgreSQL
      dbEngineAdapter: pgAdapter, // Use PostgreSQL adapter
    });
  }
  return ormgptInstance;
}

// Middleware to parse incoming JSON
app.use(express.json()); // Use express.json() to parse incoming JSON bodies

// Health check endpoint for the server
app.get('/', async (req: Request, res: Response) => {
  try {
    // Query PostgreSQL to check if the connection works
    const pgResult = await pgPool.query('SELECT NOW()');
    console.log('PostgreSQL connection check result:', pgResult.rows);

    res.send('Server is up and running. PostgreSQL is connected.');
  } catch (error) {
    console.error('Error checking PostgreSQL connection:', error);
    res.status(500).send('Error with PostgreSQL connection');
  }
});

// POST route to process the query from the user (SQL query generation)
app.post('/query', async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  const { query } = req.body; // Expect a query in the body like: { "query": "get all users" }

  if (!query) {
    res.status(400).json({ error: 'Query is required' });
    return;
  }

  try {
    // Initialize ORM GPT (if not already initialized)
    const ormgpt = await setupOrmGPT();

    // Get the SQL query generated by ORM GPT
    const sqlQuery = await ormgpt.query(query);

    // Check if sqlQuery is a string (it should be the SQL query)
    if (typeof sqlQuery !== 'string') {
      res.status(400).json({ error: 'Invalid query generated by ORM GPT' });
      return;
    }

    console.log('Generated SQL:', sqlQuery);

    // Execute the SQL query on the database
    const pgResult: QueryResult = await pgPool.query(sqlQuery);

    // Return the results from PostgreSQL
    res.json(pgResult.rows); // Respond with rows from the database
  } catch (error) {
    console.error('Error executing query:', error);

    // Pass the error to the next middleware (if you have error handling middleware)
    next(error);
  }
});

// Start the server
app.listen(port, async () => {
  console.log(`Server running on port ${port}`);
  await setupOrmGPT(); // Initialize ormGPT with PostgreSQL adapter
});

export default app;
