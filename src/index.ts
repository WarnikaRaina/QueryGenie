import 'dotenv/config';
import { Pool } from 'pg';  // PostgreSQL connection pool
import axios from 'axios';  // Hugging Face API integration
import { ormGPT } from './ormGPT';  // Import ormGPT
import { PostgresAdapter } from "../src/PostgresAdapter";  // Import PostgreSQL adapter
import path from 'path';

// Check if the app is running in Docker
const isDocker = process.env.DOCKER_ENV === 'true';  // Check if running inside Docker

// Use conditional path for schema.sql based on the environment
const schemaFilePath = isDocker
  ? '/usr/src/app/example/schema.sql'  // Path for Docker container
  : path.resolve('./example/schema.sql');  // Path for local machine

// Set PostgreSQL host depending on the environment (Docker or local)
const pgHost = process.env.PG_HOST || 'localhost';  // Use PG_HOST environment variable or default to localhost

// PostgreSQL connection pool setup
const pgPool = new Pool({
  host: pgHost,  // Dynamically set based on environment (Docker or local)
  port: 5432,
  user: process.env.PG_USER || 'postgres',
  password: process.env.PG_PASSWORD || 'War@123PG',
  database: process.env.PG_DB || 'ormgpt',
});

// Initialize ORM GPT with PostgreSQL adapter
const ormgpt = new ormGPT({
  apiKey: process.env.HUGGING_FACE_API_KEY || '',  // Use Hugging Face API key from .env
  schemaFilePath: schemaFilePath,  // Use the dynamically set schema file path
  dialect: 'postgres',  // SQL dialect
  dbEngineAdapter: new PostgresAdapter({ client: pgPool }),  // Pass pgPool to PostgresAdapter
});

(async () => {
  try {
    const userQuery = "Give me all users who ordered a laptop."; // Example user query

    // Call Hugging Face API to generate SQL query from plain English
    const huggingFaceResponse = await axios.post(
      'https://api-inference.huggingface.co/models/facebook/llama-2-7b',  // Your Hugging Face model URL
      { inputs: userQuery },
      {
        headers: {
          Authorization: `Bearer ${process.env.HUGGING_FACE_API_KEY}`,
        }
      }
    );

    // The Hugging Face response will have a 'generated_text' property that contains the SQL query
    const sqlQuery = huggingFaceResponse.data.generated_text;
    if (typeof sqlQuery !== 'string') {
      console.error('Invalid SQL query generated by Hugging Face');
      return;
    }

    console.log('Generated SQL:', sqlQuery);

    // Execute the SQL query on PostgreSQL
    const pgResult = await pgPool.query(sqlQuery);

    // Log the result from PostgreSQL
    console.log('PostgreSQL query result:', pgResult.rows);
  } catch (error) {
    console.error('Error executing query:', error);
  } finally {
    // Close the connection pool when done
    await pgPool.end();
  }
})();
